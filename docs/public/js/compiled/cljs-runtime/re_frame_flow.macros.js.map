{"version":3,"sources":["re_frame_flow/macros.cljc"],"mappings":";AAQA","names":[],"sourcesContent":["(ns re-frame-flow.macros\n  #?(:cljs (:require-macros [net.cgrand.macrovich :as macros]))\n  (:require\n    #?(:clj [net.cgrand.macrovich :as macros])\n    [re-frame.core :as rf]\n    [re-frame-flow.trace :as trace]\n    [clojure.set :as set]))\n\n(macros/deftime\n  (defmacro dispatch\n    [event]\n    (let [ns' *ns*]\n      `(do\n         (when (trace/dispatch-trace-enabled?)\n           (swap! @(resolve 're-frame-flow.core/state*) update-in\n             [:dispatches ~(keyword (str ns'))] set/union #{~(first event)}))\n         (rf/dispatch ~event))))\n\n  (defmacro dispatch-sync\n    [event]\n    (let [ns' *ns*]\n      `(do\n         (when (trace/dispatch-trace-enabled?)\n           (swap! @(resolve 're-frame-flow.core/state*) update-in\n             [:dispatches ~(keyword (str ns'))] set/union #{~(first event)}))\n         (rf/dispatch-sync ~event)))))\n"]}