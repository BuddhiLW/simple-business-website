{"version":3,"sources":["playground/inbox/subs.cljs"],"mappings":";AAIA,oCAAA,pCAAMA,gFAAaC,EAAEC;AAArB,AACE,OAACC,kBAAQD,EAAED;;AAEb,2DAAA,3DAACG,wKAEA,WAAKC,GAAGC;AAAR,AACE,sDAAA,/CAACC,4CAAIF;;AAER,2DAAA,oHAAA,gDAAA,mFAAA,lTAACD,2XAGA,WAAKI,KAAKF;AAAV,AACE,uDAAA,hDAACG,8GAAmBT,kCAAY,iDAAA,jDAACO,4CAAIC;;AAExC,2DAAA,4HAAA,gDAAA,mFAAA,1TAACJ,yXAGA,iBAAAM,NAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAAYL;UAAZ,AAAAM,4CAAAD,WAAA,IAAA,jEAAcG;AAAd,AACE,4DAAA,uFAAA,2DAAA,vMAACC,+CAAOF,yFAAOC;;AAElB,2DAAA,oIAAA,gDAAA,mFAAA,mEAAA,gDAAA,mFAAA,xgBAACV,ylBAIA,WAAAY,SAA4BV;AAA5B,AAAA,IAAAW,aAAAD;cAAA,AAAAJ,4CAAAK,WAAA,IAAA,rEAAMC;mBAAN,AAAAN,4CAAAK,WAAA,IAAA,1EAAcE;AAAd,AACE,IAAMC,WAAS,uDAAA,gGAAA,vJAACL,+CAAOG,2FAASC;AAAhC,AACE,uDAAA,hDAACV,gHAAoBT,kCAAYoB;;AAEtC,2DAAA,0HAAA,gDAAA,mFAAA,4DAAA,gDAAA,mFAAA,mEAAA,gDAAA,mFAAA,7rBAAChB,8wBAKA,WAAAiB,SAAgCf;AAAhC,AAAA,IAAAgB,aAAAD;UAAA,AAAAT,4CAAAU,WAAA,IAAA,jEAAMR;cAAN,AAAAF,4CAAAU,WAAA,IAAA,rEAAUJ;mBAAV,AAAAN,4CAAAU,WAAA,IAAA,1EAAkBH;AAAlB,AACE,IAAMI,eAAa,uDAAA,gGAAA,vJAACR,+CAAOG,2FAASC;AAApC,AACE,OAACK,gBAAM,AAACC,6CAAKF,aAAaT","names":["playground.inbox.subs/reverse-cmp","a","b","cljs.core/compare","re_frame.core.reg_sub","db","_","cljs.core.get","user","cljs.core.sort_by","p__48423","vec__48424","cljs.core.nth","users","uid","cljs.core.get_in","p__48427","vec__48428","inboxes","active-inbox","messages","p__48431","vec__48432","participants","cljs.core/first","cljs.core.disj"],"sourcesContent":["(ns playground.inbox.subs\n  (:require\n   [re-frame.core :as rf]))\n\n(defn reverse-cmp [a b]\n  (compare b a))\n\n(rf/reg-sub\n :inboxes\n (fn [db _]\n   (get db :inboxes)))\n\n(rf/reg-sub\n :user/inboxes\n :<- [:recipes/user]\n (fn [user _]\n   (sort-by :update-at reverse-cmp (get user :inboxes))))\n\n(rf/reg-sub\n :inbox/user-image\n :<- [:users]\n (fn [users [_ uid]]\n   (get-in users [uid :profile :img])))\n\n(rf/reg-sub\n :inbox/inbox-messages\n :<- [:inboxes]\n :<- [:nav/active-inbox]\n (fn [[inboxes active-inbox] _]\n   (let [messages (get-in inboxes [active-inbox :messages])]\n     (sort-by :created-at reverse-cmp messages))))\n\n(rf/reg-sub\n :inbox/chat-with\n :<- [:uid]\n :<- [:inboxes]\n :<- [:nav/active-inbox]\n (fn [[uid inboxes active-inbox] _]\n   (let [participants (get-in inboxes [active-inbox :participants])]\n     (first (disj participants uid)))))\n"]}