{"version":3,"sources":["playground/components/form_group.cljs"],"mappings":";;AAQA,AAAKA,2CACH,AAACC,8DACA,WAAKC;AAAL,AAAA,0FAAA,sDACU,qDAAA,rDAACC,+CAAOD;;AAErB,8CAAA,sDAAAE,pGAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;SAAA,AAAAE,4CAAAF,eAAA,hEACWI;YADX,AAAAF,4CAAAF,eAAA,nEACcK;WADd,AAAAH,4CAAAF,eAAA,lEACoBM;aADpB,AAAAJ,4CAAAF,eAAA,pEACyBO;kBADzB,AAAAL,4CAAAF,eAAA,zEACiCQ;uBADjC,AAAAN,4CAAAF,eAAA,9EACmCS;uBADnC,AAAAP,4CAAAF,eAAA,9EAC8CU;kBAD9C,AAAAR,4CAAAF,eAAA,zEACyDW;AADzD,AAAA,0FAAA,wGAAA,2CAAA,iEAAA,aAAA,mFAAA,iGAAA,2CAAA,gEAAA,KAAA,0DAAA,OAAA,wEAAA,iBAAA,mFAAA,iGAAA,2CAAA,oDAAA,KAAA,iDAAA,2CAAA,4EAAA,iBAAA,gEAAA,sBAAA,+DAAA,mEAAA,MAAA,+DAAA,aAAA,mFAAA,97CAEMC,oTAECC,8bAGCA,ieAGgBT,yRAGfC,sBACL,0BAAA,AAAAS,TAAME,yBAAQ,sDAAA,mFAAA,zIAACC;IACTC,cAAY,AAAChB,4CAAIc,OAAOZ;IACxBe,QAAM,+BAAA,KAAA,lBAAID;IACVE,kBAAU,AAACC,4BAAW,iBAAAC,WAAA,AAAAR,gBAAKP;AAAL,AAAA,4EAAAe,yBAAAA,7FAAClB,mCAAAA,6CAAAA;;IACvBmB,WAAS;AAAA,AACE,GAAIH;AACF,8BAAA,mFAAA,1GAACI,kLAA8BpB;;AAC/B,8BAAA,mFAAA,1GAACoB,oLAA+BpB;;;AAPnD,AAAA,0FAAA,iGAAA,2CAAA,oDAAA,aAAA,mFAAA,kGAAA,wCAAA,iEAAA,2DAAA,sDAAA,0DAAA,qDAAA,gEAAA,oDAAA,8DAAA,uDAAA,yEAAA,+DAAA,sEAAA,KAAA,xlCASMS,gSAECY,m0BAEc,kBAAIhB,kBAAW,CAACL,mCAAAA,2CAAAA,VAAGG,uBAAAA,SAAQ,iBAAAmB,WAAA,AAAAZ,gBAAKP;AAAL,AAAA,4EAAAmB,yBAAAA,7FAACtB,mCAAAA,6CAAAA;oBAbjD,dAcuBmB,SACHjB,UAIA,oCAAA,IAAA,tBAAII,2BAEC,EAAU,AAACW,4BAAW,iBAAAQ,WAAA,AAAAf,gBAAKP;AAAL,AAAA,4EAAAsB,yBAAAA,7FAACzB,mCAAAA,6CAAAA;qEArBhD,WAAAW,pDAY8BpB,rBASL,KAAA,AAAoC4B,UACxCJ;AAtBrB,AAgB0B,OAACQ,mDAAMpB,OAAOqB,gBAAMxB,GAAG,AAAA,AAAAW;GAItBJ,sBAIxB,SAAA,AAAA,mFAAA,uGAAA,2CAAA,2DAAA,UAAA,kRAAA,iDAAA,2CAAA,iDAAA,oBAAA,mFAAA,0EAAA,j4BAAMQ,yIACAW,+NACmB,0BAAA,mFAAA,mDAAA,hKAACC,6fAEnBb","names":["playground.components.form-group/r-input","reagent.core.reactify_component","props","cljs.core.dissoc","p__47389","map__47394","cljs.core/--destructure-map","cljs.core.get","playground.components.form-group/form-group","id","label","type","values","&","not-deref?","text-area?","on-key-down","js/module$node_modules$$mui$material$node$index.FormControl","js/module$node_modules$$mui$material$node$index.Grid","cljs.core/deref","p1__47385#","errors","re_frame.core.subscribe","input-error","error","is-empty?","clojure.string/blank?","G__47427","validate","re-frame.core/dispatch","js/module$node_modules$$mui$material$node$index.Input","G__47454","cljs.core.swap_BANG_","cljs.core/assoc","G__47463","js/module$node_modules$$mui$material$node$index.Typography","playground.utilites/color"],"sourcesContent":["(ns playground.components.form-group\n  (:require\n   [\"@mui/material\" :refer [FormControl Grid Input Typography TextField]]\n   [clojure.string :as str]\n   [playground.utilites :as util]\n   [re-frame.core :as rf]\n   [reagent.core :as r]))\n\n(def r-input\n  (r/reactify-component\n   (fn [props]\n     [:input (dissoc props :ref)])))\n\n(defn form-group\n  [{:keys [id label type values  & not-deref? text-area? on-key-down]}]\n  [:> FormControl {:full-width true}\n                   ;; :component \"form\"}\n   [:> Grid {:container true\n             :display \"flex\"\n             :flex-direction \"column\"}\n    [:> Grid {:item true\n              :sx {:justify-content \"center\"}\n              :class-name \"pl-1 text-slate-700\"\n              :html-for id\n              :font-weight 500\n              :component \"h4\"}\n     [:p label]]\n    (let [errors @(rf/subscribe [:form/errors])\n          input-error (get errors id)\n          error (if input-error true false)\n          is-empty? (str/blank? (id @values))\n          validate (fn []\n                     (if is-empty?\n                       (rf/dispatch [:form/has-value? id])\n                       (rf/dispatch [:form/clear-error id])))]\n\n      [:> Grid {:item true}\n       ;; (if text-area?\n       [:> Input {:variant \"outlined\"\n                  :inputComponent r-input\n                  :value (if not-deref? (id values) (id @values))\n                  :on-blur validate\n                  :type type\n                  :on-change #(swap! values assoc id (.. % -target -value))\n                  :full-width true\n                  :multiline true\n                  :rows (if text-area? 4 1)\n                  :on-key-down on-key-down\n                  :on-key-up (when-not (str/blank? (id @values)) validate)\n                  :error error}]\n\n       (when error\n         [:> Typography {:variant \"caption\"\n                         :color (util/color [:red :600])\n                         :sx {:mt 1}}\n          [:p input-error]])])]])\n"]}