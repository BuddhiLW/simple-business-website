{"version":3,"sources":["playground/upload_file/events.cljs"],"mappings":";AAOA,yDAAA,zDAACA,mIAEA,aAAAC,FAAKG;AAAL,AAAA,IAAAF,aAAAD;YAAA,AAAAE,4CAAAD,WAAA,IAAA,nEAAQE;WAAR,AAAAD,4CAAAD,WAAA,IAAA,lEAAUG;AAAV,AACE,IAAMC,YAAU,iBAAAC,WAAM,KAAAC;AAAN,AAAA,AAAAD,gBAAA,OACkBF;;AADlBE;;AAAhB,AAAA,kDAAA,iEAAA,2CAAA,uDAAA,oDAAA,iMAAA,kEAAA,gEAAA,+MAAA,iOAAA,iEAAA,mFAAA,mGAAA,v7BAIqB,mHAAA,KAAA,SAAA,jIAACE,sMACDH,gEACAA,oEACA,8BAAA,2CAAA,8DAAA,vIAACI,gOACD,+BAAA,2CAAA,8DAAA,xIAACC,6cAED,WAAKC;AAAL,AAAe,mBAAA,ZAACC,+BAAkCD;;;AAE1E,yDAAA,zDAACE,oJAEA,cAAAC,HAAKE;AAAL,AAAA,IAAAD,aAAAD;QAAA,AAAAZ,4CAAAa,WAAA,IAAA,/DAASZ;eAAT,AAAAD,4CAAAa,WAAA,IAAA,tEAAWJ;AAAX,AACE,IAAMM,QAAM,kDAAA,mFAAA,uDAAA,5LAACC,+CAAOF;IACdG,eAAa,YAAA,ZAACP,gCAAmC,AAACQ,qBAAQT;AADhE,AAEE,6BAAA,mFAAA,uDAAA,hKAACU,mBAASL,8QAEC,wDAAA,mFAAA,sDAAA,jMAACE,+CAAOP,lGACR,mTAAA,nTAACW,jBACD,AAACC","names":["re_frame.core.reg_event_fx","p__50898","vec__50901","cljs.core.nth","_","file","form-data","G__50905","js/FormData","playground.helpers.endpoint","ajax.core/json-request-format","ajax.core/json-response-format","response","js/console.log","re_frame.core.reg_event_db","p__50909","vec__50910","db","paths","cljs.core.get_in","log-response","cljs.core/clj->js","cljs.core/assoc-in","clojure.string.split","cljs.core/second"],"sourcesContent":["(ns playground.upload-file.events\n  (:require\n   [ajax.core :as ajax]\n   [clojure.string :as s]\n   [playground.helpers :as h]\n   [re-frame.core :as rf]))\n\n(rf/reg-event-fx\n :http/upload-file\n (fn [_ [_ file]]\n   (let [form-data (doto (js/FormData.)\n                     (.append \"file\" file))]\n     {:http-xhrio\n      {:method :post\n       :uri             (h/endpoint \"v1\" \"upload\" \"file\")\n       :params          form-data\n       :body            form-data\n       :format          (ajax/json-request-format {:keywords? true})\n       :response-format (ajax/json-response-format {:keywords? true})\n       :on-success      [:http/upload-file-success]\n       :on-failure      (fn [response] (js/console.log \"response error: \" response))}})))\n\n(rf/reg-event-db\n :http/upload-file-success\n (fn [db [_ response]]\n   (let [paths (get-in db [:files :path])\n         log-response (js/console.log \"response success:\" (clj->js response))]\n     (assoc-in db [:files :path]\n               (->\n                (get-in response [:body :file])\n                (s/split #\"resources\")\n                (second))))))\n"]}