{"version":3,"sources":["playground/auth/events.cljs"],"mappings":"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","names":["playground.auth.events/playground-user-key","p__45577","map__45579","cljs.core/--destructure-map","cljs.core.get","playground.auth.events/set-user-ls!","auth","js/localStorage","playground.auth.events/remove-user-ls!","playground.auth.events/set-user-interceptors","re-frame.core/after","playground.spec/check-spec-interceptor","playground.auth.events/remove-user-interceptors","re-frame.core/reg-cofx","cofx","_","cljs.core.assoc","cljs.reader.read_string","re_frame.core.reg_event_fx","p__45607","p__45608","map__45609","vec__45610","cljs.core.nth","map__45613","db","email","password","first-name","last-name","cljs.core/assoc-in","p__45626","p__45627","map__45628","vec__45629","map__45632","user","cljs.core.get_in","correct-password?","cljs.core._EQ_","cljs.core/not","cljs.core.update","cljs.core/dissoc","p__45641","map__45642","re_frame.core.reg_event_db","p__45643","vec__45644","profile","uid","cljs.core.update_in","cljs.core/merge","cljs.core/select-keys","p__45647","map__45648"],"sourcesContent":["(ns playground.auth.events\n  (:require\n   [cljs.reader :as reader]\n   [playground.spec :refer [check-spec-interceptor]]\n   [re-frame.core :refer [reg-event-fx\n                          reg-event-db\n                          reg-cofx\n                          after]]))\n\n(def playground-user-key \"playgroud-user\")\n\n(defn set-user-ls!\n  \"Interceptor function to set user in local storage\"\n  [{:keys [auth]}]\n  (when auth\n    (.setItem js/localStorage playground-user-key (str auth))))\n\n(defn remove-user-ls!\n  \"Interceptor function to remove user from local storage\"\n  []\n  (.removeItem js/localStorage playground-user-key))\n\n(def set-user-interceptors\n  [(after set-user-ls!)\n   check-spec-interceptor])\n\n(def remove-user-interceptors\n  [(after remove-user-ls!)\n   check-spec-interceptor])\n\n(reg-cofx\n :local-store-user\n (fn [cofx _]\n   (assoc cofx :local-store-user\n          (reader/read-string (.getItem js/localStorage playground-user-key)))))\n\n(reg-event-fx\n :sign-up\n set-user-interceptors\n (fn [{:keys [db]} [_ {:keys [email password\n                              first-name last-name]}]]\n   {:db (-> db\n            (assoc-in [:auth :uid] email)\n            (assoc-in [:users email]\n                      {:id email\n                       :profile {:first-name first-name\n                                 :last-name last-name\n                                 :email email\n                                 :password password\n                                 :img \"img/avatar.jpg\"}\n                       :saved #{}\n                       :inboxes {}}))\n    :dispatch [:set-active-page :saved]\n    :navigate-to {:path \"/saved\"}}))\n\n(reg-event-fx\n :log-in\n set-user-interceptors\n (fn [{:keys [db]} [_ {:keys [email password]}]]\n   (let [user (get-in db [:users email])\n         correct-password? (= (get-in user [:profile :password])\n                              password)]\n     (cond\n       (not user)\n       {:db (assoc-in db [:errors :email] \"User not found\")}\n       (not correct-password?)\n       {:db (assoc-in db [:errors :email] \"Wrong password\")}\n       correct-password?\n       {:db (-> db\n                (assoc-in [:auth :uid] email)\n                (update :errors dissoc :email))\n        :dispatch [:set-active-page :saved]\n        :navigate-to {:path \"/saved\"}}))))\n\n(reg-event-fx\n :auth/log-out\n remove-user-interceptors\n (fn [{:keys [db]} _]\n   {:db (assoc-in db [:auth :uid] nil)\n    :dispatch [:set-active-page :recipes]\n    :navigate-to {:path \"/\"}}))\n\n(reg-event-db\n :update/profile\n (fn [db [_ profile]]\n   (let [uid (get-in db [:auth :uid])]\n     (update-in db [:users uid :profile] merge (select-keys profile [:first-name :last-name])))))\n\n(reg-event-fx\n :auth/delete-account\n remove-user-interceptors\n (fn [{:keys [db]} _]\n   (let [uid (get-in db [:auth :uid])]\n     {:db (-> db\n              (assoc-in [:auth :uid] nil)\n              (update :users dissoc uid))\n      :dispatch [:set-active-page :recipes]\n      :navigate-to {:path \"/recipes\"}})))\n\n(comment\n  ;; Side-effects local-storage process\n  (reg-event-db\n   :set-user-ls!\n   (fn [db [_]]\n     (let [auth (get db :auth)]\n       (.setItem js/localStorage playground-user-key (str auth)))))\n\n  (reg-event-db\n   :load-user-ls!\n   (fn [db _]\n     (let [auth (js->clj (.getItem js/localStorage playground-user-key))]\n       (assoc db [:auth] auth)))))\n\n ;; (fn [db [_ user]]))\n   ;; (set! (.-localStorage js/window) (clj->js {playground-user-key user}))\n   ;; (assoc db :user user)))\n"]}