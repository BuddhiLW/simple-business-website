{"version":3,"sources":["playground/helpers.cljs"],"mappings":";AAOA,8BAAA,9BAAMA,oEACHC;AADH,AAEE,YAAA,mFAAA,2CAAA,qDAAA,SAAA,wDAAA,KAAA,gEAAA,YAAA,2CAAA,qDAAA,SAAA,wDAAA,OAAA,gEAAA,aAAA,2CAAA,qDAAA,OAAA,wDAAA,QAAA,gEAAA,eAAA,2CAAA,qDAAA,MAAA,wDAAA,SAAA,gEAAA,gBAAA,2CAAA,qDAAA,OAAA,wDAAA,UAAA,gEAAA,iBAAA,2CAAA,qDAAA,QAAA,wDAAA,WAAA,gEAAA,kBAAA,2CAAA,qDAAA,OAAA,yEAAA,gEAAA,txDAAMC,qsDAM4BC;IAC5BC,OAAK,KAAAC,KAAUJ;IACfK,OAAK,AAACC,0BAAa,AAACC,wBAAWJ,KAAK,AAACK;AAR3C,AASE,GAAI,QAAA,PAAGH;AAAP;;AAEE,IAAMI,OAAK,AAACC,gBAAM,mDAAA,WAAAC,9DAACC;AAAD,AAAa,SAAI,CAAIP,QAAK,AAAA,sFAAAM,wBACT,AAACE,cAAI,AAAA,sFAAAF;GACVV;AAF9B,AAMM,OAAA,WAAAc;AAAA,AAAE,oDAAAA,kBAAA,gLAAA,hIAAW,AAAA,mFAAON,OAAM,4BAAA,AAAA,IAAA,9BAAM,CAAAM,mBAAA;eAHhC,CAAGV,OAAK,AAAA,8FAAYI,jHACpBK,DAEA,CAAA,2HAAA;;;AAEZ,kCAAA,lCAAME,4EACHC;AADH,AAEE,QAAA,kDAAW,SAAA,RAAGA;;AAEhB,kCAAA,lCAAMC,4EACHC;AADH,AAEE,SAAK,AAACN,cAAI,AAACO,MAAS,AAACC,SAAYF,eAC5B,OAAS,AAACE,SAAYF;;AAE7B;;;;iDAAA,jDAAMG,0GAGHC,IAAIC;AAHP,wIAIOA,5FACA,uCAAA,vCAACC,sFAAqBF,lIACtB,OAACG,iCAAaH;;AAErB,6BAAA,7BAAKI;AACL,AAAA;;;8BAAA,sCAAAC,pEAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,iEAAAF;;;AAAA,AAAA,CAAA,mEAAA,nEAAME,8EAEDI;AAFL,AAGE,yDAAA,lDAACC,sDAAa,AAACC,eAAKb,2BAAQW;;;AAH9B,CAAA,sDAAA,tDAAMJ;;AAAN;AAAA,CAAA,gDAAA,WAAAC,3DAAMD;AAAN,AAAA,IAAAE,qBAAA;AAAA,AAAA,OAAAA,wDAAA,AAAAC,cAAAF;;;AAAA,AAMA","names":["playground.helpers/time-ago","timestamp","units","js/Number.MAX_VALUE","time","js/Date","diff","cljs-time.core/in-seconds","cljs-time.core/interval","cljs-time.core/now","unit","cljs.core/first","p1__49152#","cljs.core.drop_while","cljs.core/not","Math/floor","p1__49153#","playground.helpers/format-price","price","playground.helpers/valid-number","number","js/isNaN","js/parseInt","playground.helpers/associate-by-kkeyword-value","key","coll","playground.utilites/keywordize-at-keys","playground.utilites/associate-by","playground.helpers/api-url","var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","playground.helpers/endpoint","seq49161","self__5755__auto__","cljs.core/seq","params","clojure.string.join","cljs.core/cons"],"sourcesContent":["(ns playground.helpers\n  (:require [cljs-time.core :as t]\n            [clojure.string :as str]\n            [playground.utilites :refer [keywordize-at-keys\n                                         associate-by]]))\n\n;; https://stackoverflow.com/questions/32511405/how-would-time-ago-function-implementation-look-like-in-clojure\n(defn time-ago\n  [timestamp]\n  (let [units [{:name \"second\" :limit 60 :in-second 1}\n               {:name \"minute\" :limit 3600 :in-second 60}\n               {:name \"hour\" :limit 86400 :in-second 3600}\n               {:name \"day\" :limit 604800 :in-second 86400}\n               {:name \"week\" :limit 2629743 :in-second 604800}\n               {:name \"month\" :limit 31556926 :in-second 2629743}\n               {:name \"year\" :limit js/Number.MAX_VALUE :in-second 31556926}]\n        time (js/Date. timestamp)\n        diff (t/in-seconds (t/interval time (t/now)))]\n    (if (< diff 5)\n      \"just now\"\n      (let [unit (first (drop-while #(or (>= diff (:limit %))\n                                         (not (:limit %)))\n                                    units))]\n        (-> (/ diff (:in-second unit))\n            Math/floor\n            int\n            (#(str % \" \" (:name unit) (when (> % 1) \"s\") \" ago\")))))))\n\n(defn format-price\n  [price]\n  (str \"R$ \" (/ price 100)))\n\n(defn valid-number\n  [number]\n  (and (not (js/isNaN (js/parseInt number)))\n       (number? (js/parseInt number))))\n\n(defn associate-by-kkeyword-value\n  \"Associate by key the key-work values and transform key to keyword, as well as it's value.\n  Generally, used for grouping data by the unique values in a coll, coming from requests.\"\n  [key coll]\n  (->> coll\n       (keywordize-at-keys #{key})\n       (associate-by key)))\n\n(def api-url \"http://localhost:8666\")\n(defn endpoint\n  \"Concat any params to api-url separated by /\"\n  [& params]\n  (str/join \"/\" (cons api-url params)))\n;; (endpoint \"v1\")\n\n(comment\n  ;; Examples:\n\n  (let [a [{:id \"a\" :b 1}\n           {:id \"b\" :b 2}\n           {:id \"c\" :b 3}]]\n    (->> a\n         (keywordize-at-keys #{:id})\n         (associate-by :id)))\n  ;; => {:a {:id :a, :b 1}, :b {:id :b, :b 2}, :c {:id :c, :b 3}}\n\n  (let [ex [{:recipe/recipe_id \"a1995316-80ea-4a98-939d-7c6295e4bb46\"\n             :recipe/public true\n             :recipe/prep_time 5\n             :recipe/name \"Avocado Salad\"\n             :recipe/img \"https://res.cloudina \u2026 cipe/vegie-salad.jpg\"\n             :recipe/favorite_count 5\n             :recipe/uid \"jade@mailinator.com\"}]]\n    (associate-by-kkeyword-value :recipe/recipe_id ex))\n  ;; => {:a1995316-80ea-4a98-939d-7c6295e4bb46\n  ;;     #:recipe{:recipe_id :a1995316-80ea-4a98-939d-7c6295e4bb46,\n  ;;              :public true,\n  ;;              :prep_time 5,\n  ;;              :name \"Avocado Salad\",\n  ;;              :img \"https://res.cloudina \u2026 cipe/vegie-salad.jpg\",\n  ;;              :favorite_count 5,\n  ;;              :uid \"jade@mailinator.com\"}}\n\n         ;; (map (fn [[k v]] (println k v)))\n         ;; (into {} (map (fn [[k v]] {(keyword k) (if (= k :id) v (keyword v))})))))\n\n  (def a [{:a \"a\" :b 1}\n          {:a \"b\" :b 2}\n          {:a \"c\" :b 3}])\n  ;; => #'cljs.user/a\n  a\n  ;; => [{:a \"a\", :b 1} {:a \"b\", :b 2} {:a \"c\", :b 3}]\n  (map (juxt :a identity) a))\n  ;; => ([\"a\" {:a \"a\", :b 1}] [\"b\" {:a \"b\", :b 2}] [\"c\" {:a \"c\", :b 3}])\n"]}