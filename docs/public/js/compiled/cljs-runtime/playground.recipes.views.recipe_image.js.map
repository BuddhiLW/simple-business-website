{"version":3,"sources":["playground/recipes/views/recipe_image.cljs"],"mappings":";;AASA,mDAAA,nDAAMA;AAAN,AACE,qBAAA,2CAAA,mDAAA,/GAAME;IACAC,SAAO,AAACC,gDAAOF;oBADrB,AAAAD,hBAEMI,gCAAS,sDAAA,mFAAA,zIAACC;IACVC,OAAK,aAAAC,FAAKI;AAAL,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;UAAA,AAAAE,4CAAAF,eAAA,jEAAeI;AAAf,AACE,AAAiBD;;AACjB,GAAM,GAAK,AAACE,4BAAWD;AAAvB,AACE,uBAAA,mFAAA,gFAAA,2CAAA,rOAACE,wRAAwCF;;AACzC,OAACG,sBAAOb,OAAOD;;AAFjB;;;IAGPe,aAAW,WAAAC;AAAA,AAAA,IAAAC,aAAAD;IAAAC,iBAAA,AAAAT,4BAAAS;iBAAA,AAAAR,4CAAAQ,eAAA,xEAAaC;aAAb,AAAAT,4CAAAQ,eAAA,pEAAwBE;AAAxB,AACE,uBAAA,mFAAA,1GAACN,wLAAiCK;;AAClC,OAACJ,sBAAOb,OAAOkB;;AAVlC,AAWE;AAAA,AACE,IAAAC,aAAA,AAAArB,gBAAiC,sDAAA,mFAAA,zIAACK;IAAlCgB,iBAAA,AAAAZ,4BAAAY;UAAA,AAAAX,4CAAAW,eAAA,jEAAqBT;WAArB,AAAAF,4CAAAW,eAAA,lEAAyBC;AAAzB,AAAA,0FAAA,iDAAA,mFAAA,iGAAA,2CAAA,8CAAA,IAAA,iDAAA,2CAAA,iEAAA,KAAA,sEAAA,eAAA,gEAAA,2BAAA,mFAAA,sGAAA,2CAAA,0GAAA,iDAAA,2CAAA,yDAAA,MAAA,uDAAA,cAAA,/gCAEOC,mmBAICC,0JAAkB,iCAAA,AAAA,WAAA,1BAAMpB,sTAGN,4CAAK,iBAAAqB,mBAAIb;AAAJ,AAAA,oBAAAa;AAAAA;;AAAA;;MAT/B,sDAAA,LAWwBH,kEACK,iCAAA,AAAA,fAAMlB;AAAN,AACG,kBAAA,2CAAA,kEAAA,sEAAA,wDAAA,2CAAA,jSAACY,oVAC0BJ;GAF9B,8BAG1B,iCAAA,AAAA,qHAAA,2CAAA,gEAAA,sEAAA,sDAAA,QAAA,sDAAA,mFAAA,sDAAA,2CAAA,+DAAA,WAAAc,vqBAAMtB,kGACHyB;AADH,AAI8B,YAAAH,LAACpB,sBAAOJ;GAJtC,gEAAA,iBAAA,mFAAA,iGAAA,2CAAA,8CAAA,IAAA,mEAAA,iBAAA,+HAAA,2CAAA,kDAAA,mDAAA,uDAAA,MAAA,qDAAA,OAAA,+DAAA,oEAAA,WAAAyB,zvBAMeG,sTAEFC,6WAGoB7B;AAXjC,AAYuC,GAAM,oEAAA,pEAAC8B,6CAAE,AAAAL;AAAT,AACE,YAAAA,LAACrB,sBAAOJ;;AADV;;mCAZvC,yDAAA,mFAAA,iGAAA,2CAAA,0DAAA,OAAA,wEAAA,MAAA,4EAAA,gBAAA,gDAAA,IAAA,iDAAA,IAAA,iDAAA,2CAAA,sEAAA,OAAA,iEAAA,aAAA,2iBAAA,mFAAA,mGAAA,2CAAA,2DAAA,YAAA,uDAAA,UAAA,6DAAA,znDAec4B,muBAOe,qSAAA,mFAAA,qDAAA,7aAACG,+CAAO,gKAAA,2EAAA,3OAACC,0DAAQC,ygBAC/BC;AAvBf,AAyBkC,8BAAA,mFAAA,1GAACtB;WAzBnC,iBAAA,mFAAA,mGAAA,2CAAA,2DAAA,YAAA,uDAAA,UAAA,6DAAA,WAAAc,/SA2BeQ;AA3Bf,AA6BkC,YAAAR,LAACtB,sBAAOJ;WA7B1C,uCAAA","names":["playground.recipes.views.recipe-image/recipe-img","cljs.core/deref","initial-values","values","reagent.core.atom","author?","re_frame.core.subscribe","save","p__50665","map__50666","cljs.core/--destructure-map","cljs.core.get","e","img","clojure.string/blank?","re-frame.core/dispatch","cljs.core/reset!","open-modal","p__50667","map__50668","modal-name","recipe","map__50669","name","js/module$node_modules$$mui$material$node$index.Card","js/module$node_modules$$mui$material$node$index.CardMedia","or__5045__auto__","p1__50662#","p1__50663#","p1__50664#","playground.components.modal/modal","js/module$node_modules$$mui$material$node$index.Grid","playground.components.form-group/form-group","cljs.core._EQ_","cljs.core.get_in","cljs.core.js__GT_clj","js/module$node_modules$$mui$material$node$index.colors","js/module$node_modules$$mui$material$node$index.Button"],"sourcesContent":["(ns playground.recipes.views.recipe-image\n  (:require\n   [\"@mui/material\" :refer [Button Card CardMedia colors Grid]]\n   [clojure.string :as str]\n   [playground.components.form-group :refer [form-group]]\n   [playground.components.modal :refer [modal]]\n   [re-frame.core :as rf]\n   [reagent.core :as r]))\n\n(defn recipe-img []\n  (let [initial-values {:img \"\"}\n        values (r/atom initial-values)\n        author? @(rf/subscribe [:recipe/author?])\n        save (fn [e {:keys [img]}]\n               (.preventDefault e)\n               (when (not (str/blank? img))\n                 (rf/dispatch [:recipe/upsert-image {:img img}])\n                 (reset! values initial-values)))\n        open-modal (fn [{:keys [modal-name recipe]}]\n                     (rf/dispatch [:recipes/open-modal modal-name])\n                     (reset! values recipe))]\n    (fn []\n      (let [{:recipe/keys [img name]} @(rf/subscribe [:recipes/recipe])]\n        [:<>\n         [:> Card {:p 2\n                   :sx {:box-shadow 10\n                        :border-radius \"10px\"}\n                   :class-name \"hover:shadow-2xl\"}\n          [:> CardMedia {:class (when author? \"editable\")\n                         :sx {:height 500\n                              :width 600}\n                         :image (str (or img\n                                         \"../img/placeholder.jpg\"))\n                         :alt name\n                         :on-click (when author?\n                                     #(open-modal {:modal-name :image-editor\n                                                   :recipe {:img img}}))}]]\n         (when author?\n           [modal {:modal-key :image-editor\n                   :title \"Image\"\n                   :body\n                   [:form {:on-submit #(save % values)\n                           :class-name \"w-full\"}\n                    [:> Grid {:p 5\n                              :align-items \"center\"}\n                     [form-group {:id :img\n                                  :label \"URL\"\n                                  :type \"text\"\n                                  :values values\n                                  :on-key-down #(when (= (.-which %) 13)\n                                                  (save % values))}]]]\n                   :footer\n                   [:> Grid {:display \"flex\"\n                             :flex-direction \"row\"\n                             :justify-content \"space-between\"\n                             :px 5\n                             :py 3\n                             :sx {:border-radius \"18px\"\n                                  :box-shadow 10}\n                             :bgcolor (get-in (js->clj colors :keywordize-keys true) [:grey :100])}\n                    [:> Button {:variant \"contained\"\n                                :color \"warning\"\n                                :on-click #(rf/dispatch [:recipes/close-modal])}\n                     \"Cancel\"]\n                    [:> Button {:variant \"contained\"\n                                :color \"primary\"\n                                :on-click #(save % values)}\n                     \"Save\"]]}])]))))\n"]}