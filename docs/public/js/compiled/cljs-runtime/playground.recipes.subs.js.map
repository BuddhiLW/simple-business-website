{"version":3,"sources":["playground/recipes/subs.cljs"],"mappings":";AAOA,2DAAA,3DAACA,sKAEA,WAAKC,GAAGC;AAAR,AACE,AAACC,YAAe,AAACC,qBAAQ,AAAA,uFAASC;;AAClC,OAAA,uFAASA;;AAEZ,2DAAA,mHAAA,gDAAA,mFAAA,iEAAA,gDAAA,mFAAA,rfAACL,ijBAIA,WAAAM,SAAmBJ;AAAnB,AAAA,IAAAK,aAAAD;cAAA,AAAAE,4CAAAD,WAAA,IAAA,rEAAME;UAAN,AAAAD,4CAAAD,WAAA,IAAA,jEAAcG;AAAd,AACE,cAAA,mFAAA,WAAAC,xGAAME;AAAN,AAAgB,8JAAA,vJAACC,6CAAE,AAAA,wFAAAH;GAAnB,WAAAC;AAAA,AAAwC,OAACE,6CAAE,AAAA,mFAAAF,kBAAUF;;AAArD,AACE,OAACK,+CAAO,AAACC,8CAAMC,qBAAWJ,SAAS,AAACK,eAAKT;;AAE9C,2DAAA,uHAAA,gDAAA,mFAAA,rTAACT,sXAGA,WAAKmB,OAAOjB;AAAZ,AACE,IAAMkB,WAAS,+CAAA,WAAAC,1DAACN;AAAD,AAAS,6JAAA,tJAACD,6CAAE,AAAA,uFAAAO;GAAkB,AAACH,eAAKC;IAC7CG,MAAI,AAACnB,YAAe,CAAA,yDAAkB,AAACC,qBAAQgB;AADrD,AAEEA;;AAGL,2DAAA,uHAAA,gDAAA,mFAAA,4EAAA,gDAAA,mFAAA,pgBAACpB,wlBAIA,WAAAuB,SAA0BrB;AAA1B,AAAA,IAAAsB,aAAAD;IAAAE,aAAA,AAAAjB,4CAAAgB,WAAA,IAAA;IAAAC,iBAAA,AAAAC,4BAAAD;WAAA,AAAAE,4CAAAF,eAAA,lEAAcG;UAAd,AAAApB,4CAAAgB,WAAA,IAAA,jEAAqBd;AAArB,AACE,OAACI,6CAAEc,KAAKlB;;AAEX,2DAAA,3DAACV,4LAEA,WAAKC,GAAGC;AAAR,AACE,yDAAA,mFAAA,kDAAA,vLAAC2B,+CAAO5B;;AAEX,2DAAA,gIAAA,gDAAA,mFAAA,9TAACD,0YAGA,WAAK8B,OAAO5B;AAAZ,8HACO,AAAA,kGAAc4B,jHACd,AAACZ,/GACD,uDAAA,hDAACa;;AAET,2DAAA,mHAAA,gDAAA,mFAAA,jTAAC/B,6XAGA,WAAK8B,OAAO5B;AAAZ,8HACO,AAAA,qFAAQ4B,pGACR,AAACZ,/GACD,uDAAA,hDAACa;;AAQT,2DAAA,3DAAC/B,uLAEA,cAAAgC,HAAK/B;AAAL,AAAA,IAAAgC,aAAAD;QAAA,AAAAxB,4CAAAyB,WAAA,IAAA,/DAAS/B;oBAAT,AAAAM,4CAAAyB,WAAA,IAAA,3EAAWC;AAAX,AACE,IAAMC,gBAAc,kDAAA,mFAAA,kDAAA,vLAACN,+CAAO5B;AAA5B,AACE,yDAAA,mFAAA,uEAAA,5MAAC4B,+CAAO5B,+IAAYkC,kFAA2BD;;AAEpD,2DAAA,3DAAClC,mLAEA,cAAAoC,HAAKnC;AAAL,AAAA,IAAAoC,aAAAD;QAAA,AAAA5B,4CAAA6B,WAAA,IAAA,/DAASnC;AAAT,AACE,IAAMiC,gBAAc,kDAAA,mFAAA,kDAAA,vLAACN,+CAAO5B;AAA5B,AACE,yDAAA,mFAAA,uEAAA,5MAAC4B,+CAAO5B,+IAAYkC;;AAEzB,2DAAA,oHAAA,gDAAA,mFAAA,iEAAA,gDAAA,mFAAA,tfAACnC,+jBAIA,WAAAsC,SAAoBpC;AAApB,AAAA,IAAAqC,aAAAD;cAAA,AAAA9B,4CAAA+B,WAAA,IAAA,rEAAM9B;WAAN,AAAAD,4CAAA+B,WAAA,IAAA,lEAAcC;AAAd,AACE,IAAMC,QAAM,AAAA,oFAAQD;AAApB,AACE,sDAAA,WAAAE,1DAAC3B;AAAD,AAAS,OAAC4B,0BAAUF,MAAM,AAAA,gFAAAC;GAAS,AAACxB,eAAKT;;AAE9C,2DAAA,3DAACT,kLAEA,cAAA4C,HAAK3C;AAAL,AAAA,IAAA4C,aAAAD;QAAA,AAAApC,4CAAAqC,WAAA,IAAA,/DAAS3C;AAAT,AACE,IAAMoB,MAAI,YAAA,ZAACnB,8BAAiC,AAAC2C,cAAI,kDAAA,mFAAA,2DAAA,hMAACjB,+CAAO5B;AAAzD,AACE,OAAC6C,cAAI,kDAAA,mFAAA,2DAAA,hMAACjB,+CAAO5B","names":["re_frame.core.reg_sub","db","_","js/console.log","cljs.core/clj->js","playground.db/initial-app-db","p__50226","vec__50227","cljs.core.nth","recipes","uid","p1__50224#","p1__50225#","filters","cljs.core._EQ_","cljs.core.filter","cljs.core.apply","cljs.core/every-pred","cljs.core/vals","cursos","filtered","p1__50230#","log","p__50235","vec__50236","map__50239","cljs.core/--destructure-map","cljs.core.get","cook","cljs.core.get_in","recipe","cljs.core.sort_by","p__50240","vec__50241","id-ingredient","active-recipe","p__50244","vec__50245","p__50249","vec__50250","user","saved","p1__50248#","cljs.core/contains?","p__50253","vec__50254","cljs.core/not"],"sourcesContent":["(ns playground.recipes.subs\n  (:require\n   [re-frame.core :as rf]\n   [playground.db :refer [initial-app-db]]))\n    ;; playgro]))\n\n\n(rf/reg-sub\n :cursos\n (fn [db _]\n   (js/console.log (clj->js (:cursos initial-app-db)))\n   (:cursos initial-app-db)))\n\n(rf/reg-sub\n :filter/draft\n :<- [:cursos]\n :<- [:uid]\n (fn [[recipes uid] _]\n   (let [filters [#(= (:public? %) false) #(= (:cook %) uid)]]\n     (filter (apply every-pred filters) (vals recipes)))))\n\n(rf/reg-sub\n :filter/public\n :<- [:cursos]\n (fn [cursos _]\n   (let [filtered (filter #(= (:public %) true) (vals cursos)) ;;\n         log (js/console.log (str \"filtered: \" (clj->js filtered)))]\n     filtered)))\n   \n\n(rf/reg-sub\n :recipe/author?\n :<- [:cursos/recipe]\n :<- [:auth/current-user]\n (fn [[{:keys [cook]} uid] _]\n   (= cook uid)))\n\n(rf/reg-sub\n :cursos/active-modal\n (fn [db _]\n   (get-in db [:nav :active-modal])))\n\n(rf/reg-sub\n :recipe/ingredients\n :<- [:cursos/recipe]\n (fn [recipe _]\n   (->> (:ingredients recipe)\n        (vals)\n        (sort-by :order))))\n\n(rf/reg-sub\n :recipe/steps\n :<- [:cursos/recipe]\n (fn [recipe _]\n   (->> (:steps recipe)\n        (vals)\n        (sort-by :order))))\n\n#_(rf/reg-fx\n   :recipe/update-recipe\n   (fn [{:keys [db]} [_ recipe-id values]]\n     (let [recipe (get-in db [:cursos recipe-id])]\n       {:db (update-in db [:cursos recipe-id] merge values)\n        :dispatch [:cursos/close-modal]})))\n(rf/reg-sub\n :recipe/ingredient\n (fn [db [_ id-ingredient]]\n   (let [active-recipe (get-in db [:nav :active-recipe])]\n     (get-in db [:cursos active-recipe :ingredients id-ingredient]))))\n\n(rf/reg-sub\n :recipe/public?\n (fn [db [_]]\n   (let [active-recipe (get-in db [:nav :active-recipe])]\n     (get-in db [:cursos active-recipe :public?]))))\n\n(rf/reg-sub\n :cursos/saved\n :<- [:cursos]\n :<- [:cursos/user]\n (fn [[recipes user] _]\n   (let [saved (:saved user)]\n     (filter #(contains? saved (:id %)) (vals recipes)))))\n\n(rf/reg-sub\n :cursos/loaded?\n (fn [db [_]]\n   (let [log (js/console.log \"recipes loaded?\" (not (get-in db [:loading :cursos])))]\n     (not (get-in db [:loading :cursos])))))\n"]}