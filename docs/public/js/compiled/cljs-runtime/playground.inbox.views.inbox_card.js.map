{"version":3,"sources":["playground/inbox/views/inbox_card.cljs"],"mappings":"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","names":["p__49260","map__49261","cljs.core/--destructure-map","cljs.core.get","playground.inbox.views.inbox-card/card-text","user-email","inbox-id","notifications?","notifications","updated-at","js/module$node_modules$$mui$material$node$index.Grid","js/module$node_modules$$mui$material$node$index.Typography","js/module$node_modules$$mui$material$node$index.IconButton","js/module$node_modules$$mui$icons_material$Notifications.default","js/module$node_modules$$mui$icons_material$NotificationsNone.default","js/module$node_modules$$mui$icons_material$AccessTime.default","playground.helpers/time-ago","p__49273","map__49274","playground.inbox.views.inbox-card/card-rounded-img","user-image","p__49284","map__49288","playground.inbox.views.inbox-card/inbox-card","inbox","cljs.core/deref","re_frame.core.subscribe","playground.router/path-for","re-frame-flow.trace/dispatch-trace-enabled?","cljs.core.swap_BANG_","js/re-frame-flow","js/re-frame-flow.core","js/re-frame-flow.core.state*","cljs.core/Var","re-frame-flow.core/state*","cljs.core/update-in","clojure.set/union","re-frame.core/dispatch","js/module$node_modules$$mui$material$node$index.Card"],"sourcesContent":["(ns playground.inbox.views.inbox-card\n  (:require\n   [\"@mui/icons-material/AccessTime\" :default AccessTimeIcon] ;; import MarkChatUnreadIcon from '@mui/icons-material/MarkChatUnread'));))\n   [\"@mui/icons-material/Notifications\" :default NotificationsIcon] ;; import NotificationsNoneIcon from '@mui/icons-material/NotificationsNone'\n   [\"@mui/icons-material/NotificationsNone\" :default NotificationsNoneIcon] ;; import AccessTimeIcon from '@mui/icons-material/AccessTime';\n   [\"@mui/material\" :refer [Card Grid IconButton Typography]] ;; import MarkChatUnreadIcon from '@mui/icons-material/MarkChatUnread'));))\n   [playground.helpers :as h]\n   [playground.router :as router]\n   [re-frame-flow.macros :refer-macros [dispatch dispatch-sync]]\n   [re-frame.core :as rf]))\n\n(defn card-text\n  [{:keys [user-email inbox-id notifications? notifications updated-at]}]\n  [:> Grid {:item true\n            :pl 1\n            :pt 1}\n            ;; :display \"flex\"\n            ;; :max-width \"40vw\"\n            ;; :flex-wrap \"wrap\"}\n   [:> Grid {:container true\n             :pl 2}\n    [:> Typography {:class-name \"flex items-center justify-between text-slate-600\"}\n     user-email]]\n   [:> Grid {:container true\n             :display \"flex\"\n             :direction \"row\"\n             :justify-content \"space-between\"}\n    (if notifications?\n      [:<>\n       [:> IconButton\n        [:> NotificationsIcon {:class-name \"text-gray-400\"\n                               :font-size \"small\"}]\n        [:> Typography {:class-name \"text-gray-400\"\n                        :font-size \"small\"}\n         notifications]]]\n      [:> IconButton\n       [:> NotificationsNoneIcon {:class-name \"text-gray-400\"\n                                  :font-size \"small\"}]])\n    [:> Grid {:item true\n              :gap 1\n              :display \"flex\"\n              :sx {:flex-direction \"row\"}\n              :align-items \"center\"\n              :justify-content \"space-between\"\n              :flex-wrap \"wrap\"}\n     [:> AccessTimeIcon {:class-name \"text-gray-400\"\n                         :font-size \"small\"}]\n     [:> Typography {:class-name \"text-gray-400\"\n                     :font-size \"small\"}\n      (h/time-ago updated-at)]]]])\n\n(defn card-rounded-img\n  [{:keys [user-email user-image]}]\n  [:> Grid {:item true}\n   [:img {:class-name \"h-[58px] w-[58px] rounded-full object-cover object-center\"\n          :alt (str \"user image: \" user-email)\n          :src user-image}]])\n\n(defn inbox-card\n  [{:keys [user-email inbox-id notifications?] :as inbox}]\n  (let [user-image @(rf/subscribe [:inbox/user-image user-email])]\n    ^{:key user-email}\n    [:> Grid {:item true\n              :as \"a\"\n              :href     (router/path-for :inbox :inbox-id inbox-id)\n              :on-click #(when notifications?\n                           (dispatch [:inbox/mark-as-read user-email]))}\n     [:> Card {:sx {:box-shadow 10\n                    :border-radius \"10px\"}\n               :class-name \"transition hover:shadow-2xl hover:drop-shadow-2xl hover:-translate-y-1 ease-in-out delay-150 duration-500\"}\n               ;; :flex-wrap \"wrap\"\n               ;; :max-width \"40vw\"}\n      [:> Grid {:container true\n                :display \"flex\"\n                :direction \"row\"\n                ;; :flex-direction \"row\"\n                :p 3\n                :py 2\n                :align-items \"center\"}\n       [card-rounded-img {:user-email user-email :user-image user-image}]\n       [card-text inbox]]]]))\n"]}