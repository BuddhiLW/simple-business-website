{"version":3,"sources":["playground/inbox/events.cljs"],"mappings":"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","names":["playground.inbox.events/inbox-interceptors","playground.spec/check-spec-interceptor","re_frame.core.reg_event_db","p__45576","vec__45580","cljs.core.nth","db","_","user-email","uid","cljs.core.get_in","cljs.core/assoc-in","p__45594","vec__45595","map__45598","cljs.core/--destructure-map","cljs.core.get","notify","inbox-id","notification-count","js/Date.now","re_frame.core.reg_event_fx","p__45614","p__45615","map__45617","vec__45618","map__45621","message","participants","chat-with","cljs.core/first","cljs.core.disj","cljs.core.update_in","cljs.core/conj","p__45633","p__45634","map__45635","vec__45636","map__45639","map__45640","recipe-id","cook","existing-inbox-id","new-inbox-id","cljs.core/random-uuid","name","price","playground.helpers/format-price","or__5045__auto__"],"sourcesContent":["(ns playground.inbox.events\n  (:require\n   [re-frame.core :as rf]\n   [playground.helpers :as h]\n   [playground.spec :refer [check-spec-interceptor]]))\n\n(def inbox-interceptors [check-spec-interceptor])\n\n;; \"The =user-email= relates to the person the chat is with, related to the logged user (=uid=)\")\n(rf/reg-event-db\n :inbox/mark-as-read\n inbox-interceptors\n (fn [db [_ user-email]]\n   (let [uid (get-in db [:auth :uid])]\n     (assoc-in db [:users uid :inboxes user-email :notifications] 0))))\n\n(rf/reg-event-db\n :inbox/send-notification\n inbox-interceptors\n (fn [db [_ {:keys [notify inbox-id]}]]\n   (let [uid (get-in db [:auth :uid])\n         notification-count (get-in db [:users notify :inboxes uid :notifications])]\n     (-> db\n         (assoc-in [:users notify :inboxes uid] {:id inbox-id\n                                                 :notifications (inc notification-count)\n                                                 :updated-at (js/Date.now)})\n         (assoc-in [:users uid :inboxes notify] {:id inbox-id\n                                                 :notifications 0\n                                                 :updated-at (js/Date.now)})))))\n\n(rf/reg-event-fx\n :inbox/insert-message\n inbox-interceptors\n (fn [{:keys [db]} [_ {:keys [message]}]]\n   (let [uid (get-in db [:auth :uid])\n         inbox-id (get-in db [:nav :active-inbox])\n         participants (get-in db [:inboxes inbox-id :participants])\n         chat-with (first (disj participants uid))]\n     {:db (update-in db [:inboxes inbox-id :messages] conj {:message message\n                                                            :author uid\n                                                            :created-at (js/Date.now)})\n      :dispatch [:inbox/send-notification {:notify chat-with\n                                           :inbox-id inbox-id}]})))\n\n(rf/reg-event-fx\n :recipe/request-message\n inbox-interceptors\n (fn [{:keys [db]} [_ {:keys [message]}]]\n   (let [uid (get-in db [:auth :uid])\n         recipe-id              (get-in db [:nav :active-recipe])\n         cook                   (get-in db [:recipes recipe-id :cook])\n         existing-inbox-id      (get-in db [:users uid :inboxes cook :id])\n         new-inbox-id           (str uid \"-\" (random-uuid))\n         {:keys [name price]}   (get-in db [:recipes recipe-id])\n         message                {:message (str \"(\" name \" - \" (h/format-price price) \") \\n\" message)\n                                 :author uid\n                                 :created-at (js/Date.now)}]\n     {:db (if existing-inbox-id\n            (update-in db [:inboxes existing-inbox-id :messages] conj message)\n            (assoc-in db [:inboxes new-inbox-id] {:id new-inbox-id\n                                                  :participants #{uid cook}\n                                                  :messages [message]\n                                                  :notifications 0\n                                                  :updated-at (js/Date.now)}))\n      :dispatch-n [[:inbox/send-notification {:notify cook\n                                              :inbox-id (or existing-inbox-id\n                                                            new-inbox-id)}]\n                   [:recipes/close-modal]]})))\n"]}