{"version":3,"sources":["playground/validation/events.cljs"],"mappings":";AAKA,sDAAA,tDAAKA,yIAAwBC;AAE7B,yDAAA,zDAACC,iIAEAF,oDACA,cAAAG,HAAKG;AAAL,AAAA,IAAAF,aAAAD;QAAA,AAAAE,4CAAAD,WAAA,IAAA,/DAASG;SAAT,AAAAF,4CAAAD,WAAA,IAAA,hEAAWI;AAAX,AACE,6BAAA,mFAAA,oEAAA,7KAACC,mBAASH,+IAAYE;;AAEzB,yDAAA,zDAACN,mIAEAF,oDACA,cAAAU,HAAKJ;AAAL,AAAA,IAAAK,aAAAD;QAAA,AAAAL,4CAAAM,WAAA,IAAA,/DAASJ;SAAT,AAAAF,4CAAAM,WAAA,IAAA,hEAAWH;AAAX,AACE,4DAAA,mFAAA,xIAACI,kDAAUN,uJAAaO,iBAAOL","names":["playground.validation.events/validation-interceptor","playground.spec/check-spec-interceptor","re_frame.core.reg_event_db","p__45570","vec__45573","cljs.core.nth","db","_","id","cljs.core/assoc-in","p__45578","vec__45583","cljs.core.update_in","cljs.core/dissoc"],"sourcesContent":["(ns playground.validation.events\n  (:require\n   [playground.spec :refer [check-spec-interceptor]]\n   [re-frame.core :as rf]))\n\n(def validation-interceptor [check-spec-interceptor])\n\n(rf/reg-event-db\n :form/has-value?\n validation-interceptor\n (fn [db [_ id]]\n   (assoc-in db [:errors id] \"Can't be blank\")))\n\n(rf/reg-event-db\n :form/clear-error\n validation-interceptor\n (fn [db [_ id]]\n   (update-in db [:errors] dissoc id)))\n"]}