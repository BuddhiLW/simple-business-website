{"version":3,"sources":["playground/utilites.cljs"],"mappings":";;AAKA;;;4BAAA,oCAAAA,hEAAMG;AAAN,AAAA,IAAAF,aAAAD;YAAA,AAAAE,4CAAAD,WAAA,IAAA,nEAEIG;gBAFJ,AAAAF,4CAAAD,WAAA,IAAA,vEAEUI;AAFV,AAGE,4SAAA,rSAACC,+CAAO,gKAAA,2EAAA,3OAACC,0DAAQC,+QAA+BJ,MAAMC;;AAGxD,mCAAA,nCAAMI,8EAAcC,EAAEC;AAAtB,AACE,oDAAA,7CAACC,gFAAQ,AAACC,4CAAI,AAACC,6CAAKJ,EAAEK,oBAAUJ;;AAGlC,yCAAA,zCAAOK,0FACJC;AADH,AAEE,GAAM,OAASA;AAAf,AACE,OAACC,gDAAQD;;AADX;;;AAIF;;;;;;;;;;yCAAA,zCAAME,0FASHC,gBAAgBC;AATnB,AAUE,OAACC,sBACA,WAAKC;AAAL,AACE,IAAAC,mBACC,iBAAAC,oBACC,AAACC,2BAAWH;AADb,AAAA,GAAAE;AAEC,IAAAE,aAAYJ;QAAZ,AAAArB,4CAAAyB,WAAA,IAAA,/DAAOV;QAAP,AAAAf,4CAAAyB,WAAA,IAAA,/DAASC;AAAT,AACE,GAAM,AAACC,0BAAUT,gBAAgBH;AAAjC,AACE,IAAAa,qBAAe,AAACd,uCAAmBY;AAAnC,AAAA,GAAA,CAAAE,sBAAA;AAAA;;AAAA,SAAAA,LAAYC;AAAZ,AAAA,0FACGd,EAAEc;;;AAFP;;;AAHHN;;;AADD,AAAA,oBAAAD;AAAAA;;AAOCD;;GACHF;;AAEH","names":["p__47317","vec__47318","cljs.core.nth","playground.utilites/color","color","intensity","cljs.core.get_in","cljs.core.js__GT_clj","js/module$node_modules$$mui$material$node$index.colors","playground.utilites/associate-by","f","coll","cljs.core.into","cljs.core.map","cljs.core.juxt","cljs.core/identity","playground.utilites/coerced-to-keyword","k","cljs.core.keyword","playground.utilites/keywordize-at-keys","enum-typed-keys","x","clojure.walk/postwalk","e","or__5045__auto__","and__5043__auto__","cljs.core/map-entry?","vec__47331","v","cljs.core/contains?","temp__5808__auto__","v1"],"sourcesContent":["(ns playground.utilites\n  (:require\n   [\"@mui/material\" :refer [colors]]\n   [clojure.walk :as walk]))\n\n(defn color\n  \"Specify the vector of color and intensity (keys)\"\n  [[color intensity]]\n  (get-in (js->clj colors :keywordize-keys true) [color intensity]))\n\n;;\n(defn associate-by [f coll]\n  (into {} (map (juxt f identity) coll)))\n\n;;\n(defn- coerced-to-keyword\n  [k]\n  (when (string? k)\n    (keyword k)))\n\n;;\n(defn keywordize-at-keys\n  \"Coerces String values to keyword at specific keys in a nested data structure.\n\n  Given:\n  - `enum-typed-keys`: a Set of keys\n  - `x`: a (potentially nested) data structure\n\n  Replaces any Map entry [k v] where k is in `enum-typed-keys`\n  so that v gets transformed to a Keyword.\"\n  [enum-typed-keys x]\n  (walk/postwalk\n   (fn [e]\n     (or\n      (and\n       (map-entry? e)\n       (let [[k v] e]\n         (when (contains? enum-typed-keys k)\n           (when-some [v1 (coerced-to-keyword v)]\n             [k v1]))))\n      e))\n   x))\n\n(comment\n  (def my-enum-typed-keys\n    #{:banking.transaction/type\n      :banking.transaction/currency})\n\n  (keywordize-at-keys\n   my-enum-typed-keys\n   {:my\n    {:banking\n     {:transactions\n      [{:banking.transaction/id \"dkjlsfjsdl\"\n        :banking.transaction/type \"banking_tx_debit\"\n        :banking.transaction/currency \"EUR\"\n        :banking.transaction/amount 1899}\n       {:banking.transaction/id \"fdlsfjss\"\n        :banking.transaction/type \"banking_tx_credit\"\n        :banking.transaction/currency \"USD\"\n        :banking.transaction/amount 8488}]}}})\n  #_{:my\n     {:banking\n      {:transactions\n       [#:banking.transaction{:id \"dkjlsfjsdl\",\n                              :type :banking_tx_debit,\n                              :currency :EUR,\n                              :amount 1899}\n        #:banking.transaction{:id \"fdlsfjss\",\n                              :type :banking_tx_credit,\n                              :currency :USD,\n                              :amount 8488}]}}}\n\n  *e)\n"]}